@model AtividadeListModel
@using TesteApplication.Models
@{
    Layout = "_Layout";
    //ViewBag.Titulo = "Listagem de Atividades";
    ViewData["Title"] = "Listagem de Atividades";
}
@section Scripts
    {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tensorflow/3.20.0/tf.min.js"></script>
    <script>

        class Atividades {
            constructor(objeto) {
                this.text = JSON.stringify(objeto);
                this.data = JSON.parse(this.text);
            }
        }

        //Função machine learning
        async function AprendizadoLinear(atv, epochs = 0) {
            //Quantidade de iterações de treinamento
            const model = tf.sequential({
                layers: [tf.layers.dense({ units: 1, inputShape: [1] })]
            });
            model.compile({ optimizer: 'sgd', loss: 'meanSquaredError' });

            let array = [];
            atv.forEach(item => array.push(item.minutos_Diferenca));

            const tensor = tf.tensor1d(array);
            //momento do aprendizado
            const treinamento = await model.fit([45,60,120,240], [4,1], {
                //batchSize: 4,
                epochs: epochs
            });
            let previsao = model.predict([array[array.length - 1]], [1, 1]);
            document.querySelector("#idResponseML").innerHTML = previsao.toString();

            return model;
        }

        async function captureRecordsAtividade() {
            let obj = null;
            let url = "https://localhost:44388/AtividadeApi/GetRecords",
                options = {
                    method: "GET",
                    headers: {
                        "Content-Type": "application/json",
                    }
                }

            await fetch(`${url}`, options).then(data =>
                data.json())
                .then(results => {
                    obj = new Atividades(results);
                });
            return obj;
        }

        function generateHtmlText(atividades) {

            let element = document.querySelector("#idRowAtividade");
            element.classList.add("overflow-scroll");

            let text = `<ul class = "list-unstyled">`;

            for (var item of atividades.data) {

                Object.keys(item).forEach((parameter, index) => {

                    text += `<li class="fs-14">${parameter} - ${item[parameter]}</li>`;

                });
            }
            text = text + "</ul>";
            element.innerHTML = text;

        }

        let atv = null;
        const getAtividade = Promise.resolve(captureRecordsAtividade()).then(data => atv = data);



        let ML = document.querySelector("#id_ML");
        ML.addEventListener("click", async function() {
            try {
                if (document.querySelector("#idRowAtividade").innerHTML == ``) {
                    throw "Base não Listada";
                }
                else {
                    await AprendizadoLinear(atv.data, 20);
                }
            }
            catch (ex) {
                console.log(ex);
            }
        });
        document.addEventListener("DOMContentLoaded", function() {
            document.querySelector("#idRowAtividade").innerHTML = "";
        });
    </script>
}
    <div>
        <h5><span>@ViewData["Title"] </span> </h5>
        <!--Criação da Linha-->
        <div class="card">

            <div class="card-body text-center">
                <a class="text-decoration-none" href="javascript:void(0)" id="idGenerateBase" onclick="generateHtmlText(atv)">Visualizar Base de Treino</a>

            </div>

            <div class="row text-center" style="max-height:100px;" id="idRowAtividade">
            </div>



        </div>
        <div class="container-fluid">
            <a class="text-decoration-none" href="javascript:void(0)" id="id_ML">Realizar esquemas de Machine Learning</a>
            <div class="row text-center" id="idResponseML">
            </div>

            <a href="@Url.Action("Cadastro","Atividade")" class="btn btn-info text-white">Gerar nova Atividade</a>
        </div>

    </div>

